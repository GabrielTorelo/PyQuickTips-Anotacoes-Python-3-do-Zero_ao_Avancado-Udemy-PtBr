Relacionamentos entre classes:
  Conceito: Refere-se à forma como diferentes classes interagem e se conectam entre si.
  Ou seja: Os relacionamentos entre classes determinam a estrutura do código e como as classes trabalham juntas.

Tipos de relacionamentos:
  * Associação:
    Conceito: Associação é um relacionamento entre duas classes que permite que uma instância de uma classe interaja com a instância de outra classe.
    Ou seja: É uma relação de uso onde uma classe é apenas associada a outra.
    Exemplo:
      1 - Criando uma associação entre classes:
        ferram1 = Ferramenta_Madeira('Serra')
        Marceneiro('José').ferramenta = ferram1
  * Agregação:
    Conceito: Agregação é um relacionamento onde uma classe possui uma instância de outra classe, mas essa instância pode existir independentemente da classe que a contém.
    Ou seja: É uma relação que implica posse parcial.
    Exemplo:
      1 - Criando uma associação de posse parcial entre classes:
        prod = Produto('Celular', 1600)
        car = Carrinho_compras(prod, 2)
  * Composição:
    Conceito: Composição é um relacionamento forte onde uma classe contém uma instância de outra classe e a vida útil da instância contida é dependente da classe que a contém.
    Ou seja: Se a classe for destruída a instância contida também será destruída (posse total).
    Exemplo:
      1 - Criando uma associação de posse total entre classes:
        def enderecos(self, enderecos: list[Endereco]):
          ender = []
          for end in enderecos:
            ender.append(Endereco(end.get_rua, end.get_numero))
          self._enderecos = ender
  * Herança:
    Conceito: É um relacionamento onde uma classe (subclasse) herda atributos e métodos de outra classe (superclasse).
    Ou seja: Permite criar novas classes com base em classes existentes, facilitando a reutilização de código.
    Exemplo:
      1 - Criando uma relação de herança entre 'Animal' e 'Cachorro':
        class Cachorro(Animal):
          def latir(self):
            print(f"{self.get_nome} está latindo")
    Acessando métodos da superclasse (classe mãe):
      * Superior (super):
        Conceito: O método 'super' é utilizado para chamar métodos da superclasse (classe mãe) dentro da subclasse (classe filha).
        Ou seja: Permite que a subclasse (classe filha) chame métodos e inicializadores da sua superclasse (classe mãe).
        Dica: O método 'super' recebe dois parâmetros, sendo a 'classe atual' e o primeiro argumento (self).
          Logo: É possível especificar qual superclasse (classe mãe) estamos se referindo.
        Exemplo:
          1 - Acessando o método construtor da classe 'Animal' dentro da classe 'Cachorro' (aula54.py):
            class Cachorro(Animal):
              def __init__(self, nome: str):
                super().__init__(nome)
          2 - Acessando o método da classe 'A' dentro da classe 'C' (aula55.py):
            class C(B):
              def metodo(self):
                return super(B, self).metodo()
