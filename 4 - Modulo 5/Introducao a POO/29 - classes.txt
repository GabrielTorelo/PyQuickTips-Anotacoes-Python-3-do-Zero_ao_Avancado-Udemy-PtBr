Introdução as classes (class):
  Conceito: São estruturas que permitem agrupar dados e funções que operam sobre esses dados em uma única entidade.
  Ou seja: Elas servem como um molde para criar objetos, que são instâncias dessa classe.
  Uso: Utilizadas para criar modelos e abstrações do mundo real, facilitando a organização e reutilização do código.
  Analogia: Podemos fazer uma analogia a planta de uma casa ou prédio (definição de todas as características da construção).
  Convenção: Por convenção, definimos os nomes das classes com PascalCase (iniciando cada palavra com letra maiúscula).
  Escopo: O escopo é basicamente o mesmo que das funções.
    Ou seja: Variáveis e métodos definindos dentro da classe, SÓ EXISTEM DENTRO DA CLASSE!
  Exemplo:
    1 - Criando uma classe 'Pessoa' que possui um método 'cumprimentar':
      class Pessoa:
        def cumprimentar():
          print(f"Olá, seja muito bem-vindo")

Entendendo o 'self':
  Conceito: O self é uma referência à instância atual da classe, usado para acessar atributos e outros métodos da classe.
  Ou seja: O self permite que você acesse e modifique os atributos da instância atual do objeto.
  Uso: Utilizado em todos os métodos para referenciar a própria instância
  Analogia: Podemos fazer uma analogia de como a instância da classe "se vê" e permite que os métodos interajam com os atributos da instância.
  Exemplo:
    1 - Criando uma classe 'Carro' que recebe uma instância:
      class Carro:
        def __init__(self, marca, modelo, ano):
          self.marca = marca
          self.modelo = modelo
          self.ano = ano

Entendendo o 'cls' (@classmethod):
  Conceito: Refere-se a própria classe dentro dos métodos de classe.
  Ou seja: Permite que você acesse atributos e métodos da classe, ao invés de atributos e métodos da instância.
  Uso: Utilizado em métodos que precisam trabalhar com a própria classe.
  Analogia: Assim como 'self' se refere à instância atual, 'cls' se refere à classe atual.
  Exemplo:
    1 - Criando método que retorne a quantidade de vezes que a classe foi instanciada:
      @classmethod
      def exibir_numero_de_pessoas(cls):
        print(f"Número de pessoas criadas: {cls.numero_de_pessoas}")

Método construtor (__init__):
  Conceito: O método construtor é um método especial que permite inicializar os atributos do objeto.
  Ou seja: Ele configura o estado inicial do objeto, definindo valores aos atributos.
  Uso: Esse método é particularmente útil para definirmos parâmetros na criação de objetos.
  Analogia: Podemos fazer uma analogia aos métodos construtores de qualquer outra linguagem (Java, JavaScript, entre outras - Praticamente a mesma coisa).
  Exemplo:
    1 - Criando uma classe 'Humano' que espera receber 2 parâmetros em seu construtor:
      class Humano:
        def __init__(self, nome, idade):
          self.nome = nome
          self.idade = idade

Método fábrica (factory):
  Conceito: Método que retorna uma nova instância de uma classe.
  Ou seja: Um método fábrica cria e retorna novos objetos, mas a forma como esses objetos são criados pode ser personalizada ou abstraída.
  Uso: Usado para centralizar a lógica de criação de objetos, facilitando a manutenção e a extensão do código.
  Analogia: Podemos fazer uma analogia a uma fabrica real, na qual dependendo das especificações fornecidas são criadas diferentes variações do mesmo produto.
  Exemplo:
    1 - Criando um método fábrica para criar de um carro específico:
      @classmethod
      def fabrica_corolla(cls, ano):
        return cls("Toyota", "Corolla", ano)

Método abstrato (abstractmethod):
  Conceito: Um método abstrato é um método declarado em uma classe abstrata que não possui implementação.
  Ou seja: Ele deve ser implementado em qualquer classe que herde da classe abstrata.
  Decorador: O método abstrato é definido usando o decorador @abstractmethod, que é importado do módulo 'abc'.
  Uso: Usado para definr uma assinatura que deve ser implementada por qualquer subclasse (classe filha).
  Exemplo:
    1 - Criando um método abstrato:
        @abstractmethod
        def falar_oi(self):
          pass

Classes abstratas (Abstract Base Classes):
  Conceito: Classes abstratas (ABC), são classes que servem como contratos para a definição de novas classes. Elas podem forçar subclasses (classes filhas) a implementar métodos específicos.
  Ou seja: Define uma interface que outras classes devem seguir, garantindo que determinadas funcionalidades sejam implementadas nas subclasses (classes filhas).
  Analogia: Podemos fazer uma analogia a um contrato, no qual estabelece obrigações e diretrizes que devem ser seguidas.
  Exemplo:
    1 - Criando uma classe abstrata com um método abstrato:
      class Pessoa(ABC):
        @abstractmethod
        def falar_oi(self):
          pass
